//
// NIST (FIPS PUB 197)
// ADVANCED ENCRYPTION STANDARD (AES)
// Testing for compliance with examples outlined in the appendix C
//
// NK - Key word length
// NR - Number of rounds
//
// For AES-128 using NK=4 and NR=10
// For AES-192 using NK=6 and NR=12
// For AES-256 using NK=8 and NR=14
//

// Define modules in crate from the source file
#[path = "../src/modules/mod.rs"]
mod modules;

// Define testing data
const AES_DATA: [u8; 16] = [
    0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
];
const AES_128_KEY: [u8; 16] = [
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
];
const AES_192_KEY: [u8; 24] = [
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
];
const AES_256_KEY: [u8; 32] = [
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
];
const AES_128_OUTPUT: [u8; 16] = [
    0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a,
];
const AES_192_OUTPUT: [u8; 16] = [
    0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91,
];
const AES_256_OUTPUT: [u8; 16] = [
    0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89,
];

// Define the test modules
#[cfg(test)]
mod aes_tests {

    // Test for aes using a keyword length of 4 and round count of 10
    #[test]
    fn aes_128() {
        let cipher: [u8; 16] =
            crate::modules::aes::aes(crate::AES_DATA, &crate::AES_128_KEY.to_vec(), 4, 10);

        assert_eq!(crate::AES_128_OUTPUT, cipher);
    }

    // Test for aes using a keyword length of 6 and round count of 12
    #[test]
    fn aes_192() {
        let cipher: [u8; 16] =
            crate::modules::aes::aes(crate::AES_DATA, &crate::AES_192_KEY.to_vec(), 6, 12);

        assert_eq!(crate::AES_192_OUTPUT, cipher);
    }

    // Test for aes using a keyword length of 8 and round count of 14
    #[test]
    fn aes_256() {
        let cipher: [u8; 16] =
            crate::modules::aes::aes(crate::AES_DATA, &crate::AES_256_KEY.to_vec(), 8, 14);

        assert_eq!(crate::AES_256_OUTPUT, cipher);
    }
}
